rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // üîê USER ROOT DOC (e.g. /users/{userId})
    match /users/{userId} {
      // ‚úÖ Allow the user to read their own document
      allow read: if request.auth != null && request.auth.uid == userId;

      // ‚úÖ Allow create and delete if the user matches
      allow create, delete: if request.auth != null && request.auth.uid == userId;

      // ‚úÖ Allow update if:
      // - Only updating allowed fields like entitlementId, trialActive, lastLogin, or tier
      // - OR not changing tier
      // - OR the caller is an admin
      allow update: if request.auth != null && request.auth.uid == userId &&
        (
          // Only updating safe keys
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['entitlementId', 'lastLogin', 'trialActive', 'tier']) ||

          // Or not touching tier
          !request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['tier']) ||

          // Or caller is admin
          request.auth.token.admin == true
        );

      // ‚úÖ Subcollections
      match /recipes/{recipeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /categories/{categoryId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // üìä Translation usage tracking
    match /translationUsage/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // Write via backend only
    }

    // ü§ñ GPT AI usage tracking
    match /aiUsage/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // Write via backend only
    }
  }
}