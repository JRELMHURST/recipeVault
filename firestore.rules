rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ─────────── helpers ─────────── */
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
    // Only allow clients to touch benign profile prefs on /users/{uid}
    function userUpdateIsSafe() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly([
          'email',
          'platform',
          'preferredRecipeLocale'
        ]);
    }

    /* ─────────── per-user space ─────────── */
    match /users/{userId} {

      // List/get own user doc
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Create/delete own doc (disable delete if you prefer backend-only)
      allow create: if isOwner(userId);
      allow delete: if isOwner(userId);

      // Single consolidated update rule (owner with safe fields OR admin)
      allow update: if (isOwner(userId) && userUpdateIsSafe()) || isAdmin();

      /* ── recipes (CRUD by owner) ── */
      match /recipes/{recipeId} {
        allow read, write: if isOwner(userId);
      }

      /* ── custom categories (CRUD by owner) ── */
      match /categories/{categoryId} {
        allow read, write: if isOwner(userId);
      }

      /* ── optional translated/alt content (CRUD by owner) ── */
      match /translations/{translationId} {
        allow read, write: if isOwner(userId);
      }

      /* ── per-user prefs (owner RW). e.g. /users/{uid}/prefs/app
            { hiddenDefaultCategories: ['Breakfast', ...] } ── */
      match /prefs/{docId} {
        allow read, write: if isOwner(userId);
      }

      /* ── usage counters (backend writes only; client read‑only) ── */
      match /aiUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
      match /translationUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
      match /imageUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
    }

    /* ─────────── write-only analytics (from signed-in clients) ─────────── */
    match /analytics/{docId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }
  }
}