rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Only these fields are client-writable on the user doc (owner only).
    // NOTE: Do NOT include 'specialAccess' or 'superUser' here (server-only).
    function allowedUserUpdateKeys() {
      return ['tier', 'productId', 'lastLogin', 'email', 'createdAt', 'platform', 'usage'];
    }

    match /users/{userId} {
      // Owner can read their user doc
      allow read, list: if isOwner(userId);

      // Owner can create their doc with ONLY allowed keys (subset is fine)
      allow create: if isOwner(userId)
        && request.resource.data.keys().hasOnly(allowedUserUpdateKeys());

      // Owner can update ONLY the allowed keys. No removal of other keys.
      allow update: if isOwner(userId)
        // new set of keys must be: existing keys âˆª allowed keys (no unexpected new keys)
        && request.resource.data.keys().hasOnly(resource.data.keys().union(allowedUserUpdateKeys()))
        // changed keys must be confined to allowed keys
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(allowedUserUpdateKeys())
        // may add allowed keys but cannot remove existing keys
        && request.resource.data.diff(resource.data).addedKeys().hasOnly(allowedUserUpdateKeys())
        && request.resource.data.diff(resource.data).removedKeys().hasOnly([]);

      // Owner can delete their doc
      allow delete: if isOwner(userId);

      // â”€â”€ User-owned subcollections â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      match /recipes/{recipeId} {
        allow read, list, write: if isOwner(userId);
      }

      match /categories/{categoryId} {
        allow read, list, write: if isOwner(userId);
      }

      // Quota collections (read-only from client)
      match /aiUsage/{docId} {
        allow read, list: if isOwner(userId);
        allow write: if false;
      }
      match /translationUsage/{docId} {
        allow read, list: if isOwner(userId);
        allow write: if false;
      }

      // Soft-delete per-user hidden global recipes
      match /hiddenGlobalRecipes/{recipeId} {
        allow read, list, write: if isOwner(userId);
      }
    }

    // â”€â”€ Global/public docs â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    match /global_recipes/{recipeId} {
      allow read, list: if true;   // public read
      allow write: if isSignedIn() && request.auth.token.admin == true; // admin-only write
    }

    // ðŸ“Š Event analytics (write-only logging)
    match /analytics/{docId} {
      allow create: if isSignedIn();
      allow read, update, delete: if false;
    }
  }
}