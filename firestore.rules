rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ─────────── helpers ─────────── */
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    // Owners can only touch safe profile fields (never entitlement/server-only fields)
    function userUpdateIsSafe() {
      // Only these keys may change in owner updates:
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly([
          'email',
          'platform',
          'preferredRecipeLocale'
        ]);
    }

    // Validate entitlement-related writes from admin/backend
    function entitlementFieldsAreValid() {
      // Optional presence checks for server-only fields; enforce types if present.
      return
        (!('tier' in request.resource.data) ||
          request.resource.data.tier in ['none','home_chef','master_chef']) &&

        (!('productId' in request.resource.data) ||
          request.resource.data.productId is string) &&

        (!('entitlementStatus' in request.resource.data) ||
          // Keep this aligned with your backend (‘active’ | ‘inactive’)
          request.resource.data.entitlementStatus in ['active','inactive']) &&

        (!('expiresAt' in request.resource.data) ||
          request.resource.data.expiresAt == null ||
          request.resource.data.expiresAt is timestamp) &&

        (!('graceUntil' in request.resource.data) ||
          request.resource.data.graceUntil == null ||
          request.resource.data.graceUntil is timestamp) &&

        (!('isInGrace' in request.resource.data) ||
          request.resource.data.isInGrace is bool) &&

        (!('entitlementHash' in request.resource.data) ||
          request.resource.data.entitlementHash is string) &&

        (!('lastEntitlementEventAt' in request.resource.data) ||
          request.resource.data.lastEntitlementEventAt is timestamp) &&

        (!('specialAccess' in request.resource.data) ||
          request.resource.data.specialAccess is bool);
    }

    /* ─────────── per-user space ─────────── */
    match /users/{userId} {

      // READ: owners can read their doc; non-admins can't list all users
      allow get: if isOwner(userId);
      allow list: if isAdmin(); // only admins may query the users collection

      // CREATE: owner may create their doc but only with safe fields;
      // admin/backend may create with entitlement fields too.
      allow create: if (isOwner(userId) && userUpdateIsSafe()) || isAdmin();

      // UPDATE: owner can change only safe fields; admin can change anything
      // but must pass entitlement validation if touching those fields.
      allow update: if
        (isOwner(userId) && userUpdateIsSafe()) ||
        (isAdmin() && entitlementFieldsAreValid());

      // DELETE: usually disallow for clients; let backend handle account deletion.
      allow delete: if isAdmin();

      // Recipes (CRUD by owner)
      match /recipes/{recipeId} {
        allow read, write: if isOwner(userId);
      }

      // Custom categories (CRUD by owner)
      match /categories/{categoryId} {
        allow read, write: if isOwner(userId);
      }

      // Optional translated/alt content (CRUD by owner)
      match /translations/{translationId} {
        allow read, write: if isOwner(userId);
      }

      // Per-user prefs (owner RW). e.g. /users/{uid}/prefs/app
      match /prefs/{docId} {
        allow read, write: if isOwner(userId);
      }

      /* ── usage counters ──
         Clients: read-only
         Backend/Admin SDK: unrestricted (rules bypassed by Admin SDK) */
      match /recipeUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
      match /translatedRecipeUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
      match /imageUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
    }

    /* ─────────── read-only tier limits ─────────── */
    match /tierLimits/{docId} {
      allow get, list: if true;   // public read
      allow create, update, delete: if false;
    }

    /* ─────────── write-only analytics ─────────── */
    match /analytics/{docId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }
  }
}