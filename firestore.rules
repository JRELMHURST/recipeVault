rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ─────────── helpers ─────────── */
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    // Owners can only touch safe profile fields
    function userUpdateIsSafe() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly([
          'email',
          'platform',
          'preferredRecipeLocale'
        ]);
    }

    // Validate entitlement-related writes by admins/backend
    function entitlementFieldsAreValid() {
      return request.resource.data.tier in ['none', 'home_chef', 'master_chef']
        && (request.resource.data.specialAccess is bool || !('specialAccess' in request.resource.data))
        && (
          !('entitlementStatus' in request.resource.data) ||
          request.resource.data.entitlementStatus in ['active','expired','none']
        );
    }

    /* ─────────── per-user space ─────────── */
    match /users/{userId} {

      // User doc itself
      allow get, list, create, delete: if isOwner(userId);

      allow update: if (
        // Owners can only change safe profile fields
        (isOwner(userId) && userUpdateIsSafe())
        // Admins can update anything, but must respect entitlement validation
        || (isAdmin() && entitlementFieldsAreValid())
      );

      // Recipes (CRUD by owner)
      match /recipes/{recipeId} {
        allow read, write: if isOwner(userId);
      }

      // Custom categories (CRUD by owner)
      match /categories/{categoryId} {
        allow read, write: if isOwner(userId);
      }

      // Optional translated/alt content (CRUD by owner)
      match /translations/{translationId} {
        allow read, write: if isOwner(userId);
      }

      // Per-user prefs (owner RW). e.g. /users/{uid}/prefs/app
      match /prefs/{docId} {
        allow read, write: if isOwner(userId);
      }

      /* ── usage counters ── 
         Clients: read-only 
         Backend/Admin SDK: unrestricted (rules ignored) */
      match /recipeUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
      match /translatedRecipeUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
      match /imageUsage/{docId} {
        allow get, list: if isOwner(userId);
        allow create, update, delete: if false;
      }
    }

    /* ─────────── read-only tier limits ─────────── */
    match /tierLimits/{docId} {
      allow get, list: if true; // anyone can read
      allow create, update, delete: if false;
    }

    /* ─────────── write-only analytics ─────────── */
    match /analytics/{docId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }
  }
}